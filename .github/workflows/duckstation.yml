name: DuckStation UWP Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'DuckStation-UWP'

jobs:
  build:
    runs-on: windows-2022

    env:
      SolutionPath: duckstation.sln
      Platform: x64
      Configuration: ReleaseUWP
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: src/duckstation-uwp
      ProjectDirectory: src/duckstation-uwp
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: DuckStation
      SDLPath: D:\a\duckstation-uwp\duckstation-uwp\SDL2

    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Install wget
        run: |
          choco install wget -y
        shell: pwsh

      - name: Download and Extract Repository
        run: |
          Invoke-WebRequest -Uri "https://github.com/irixaligned/duckstation-uwp/archive/refs/tags/2024-03-09.zip" -OutFile "repo.zip"
          Expand-Archive -Path repo.zip -DestinationPath .
          Move-Item -Path "duckstation-uwp-2024-03-09/*" -Destination "." -Force
          Remove-Item -Recurse -Force "duckstation-uwp-2024-03-09"

      - name: Download SDL
        run: |
          echo "Downloading SDL..."
          wget https://www.libsdl.org/release/SDL2-devel-2.0.14-VC.zip
          if (Test-Path -Path "SDL2.zip") {
            echo "SDL downloaded successfully."
          } else {
            Write-Error "Failed to download SDL."
          }
        shell: pwsh

      - name: Extract SDL
        run: |
          echo "Extracting SDL..."
          Expand-Archive -Path SDL2.zip -DestinationPath SDL2
          if (Test-Path -Path "$env:SDLPath\include\SDL.h") {
            echo "SDL extracted successfully."
          } else {
            Write-Error "Failed to extract SDL."
          }
        shell: pwsh

      - name: Download Dependencies
        run: |
          echo "Downloading dependencies..."
          wget https://github.com/stenzek/duckstation-ext-qt-minimal/releases/download/latest/deps-x64.7z -O deps-x64.7z
          if (Test-Path -Path "deps-x64.7z") {
            echo "Dependencies downloaded successfully."
          } else {
            Write-Error "Failed to download dependencies."
          }
        shell: pwsh

      - name: Extract Dependencies
        run: |
          echo "Extracting dependencies..."
          7z x deps-x64.7z -odep/msvc/
          if (Test-Path -Path "dep/msvc/deps-x64/bin/rcc.exe") {
            echo "Dependencies extracted successfully."
          } else {
            Write-Error "Failed to extract dependencies."
          }
        shell: pwsh

      - name: List Extracted Dependencies
        run: |
          echo "Listing contents of dep/msvc/deps-x64/bin..."
          Get-ChildItem -Recurse -Path dep/msvc/deps-x64/bin
        shell: pwsh

      - name: Display Environment Variables
        run: |
          echo "SolutionPath: $env:SolutionPath"
          echo "Platform: $env:Platform"
          echo "Configuration: $env:Configuration"
          echo "BuildMode: $env:BuildMode"
          echo "AppxBundle: $env:AppxBundle"
          echo "ProjectPath: $env:ProjectPath"
          echo "ProjectDirectory: $env:ProjectDirectory"
          echo "PackageOutputRootDir: $env:PackageOutputRootDir"
          echo "PackageOutputDir: $env:PackageOutputDir"
          echo "SDLPath: $env:SDLPath"
        shell: pwsh

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: Restore NuGet Packages
        run: |
          msbuild $env:SolutionPath /t:restore /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:PlatformToolset=v143
        shell: pwsh

      - name: App Build
        run: |
          msbuild $env:SolutionPath `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:PlatformToolset=v143 `
            /p:IncludePath="$env:SDLPath/include;$(IncludePath)" `
            /p:LibraryPath="$env:SDLPath/lib/x64;$(LibraryPath)" `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
        shell: pwsh

      - name: Clean the Package
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh
          
      - name: Create Archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh
       
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip
